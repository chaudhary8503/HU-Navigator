# -*- coding: utf-8 -*-
"""HU_Navigator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-CsJ-_rQOXjtnEyPQHc_u8BHOU8nt2U4

Making the Graphs
"""

def addNodes(G, nodes):
    for i in nodes:
        G[i] = []
    return G

def addEdges(G,edges,directed):
    for i in edges:
        num = i[0]
        tup = tuple(i[1:])  
        G[num].append(tup)
    if directed==False:
        for i in edges: 
            num = i[1]
            tup = (i[0], i[2])
            if num in G.keys():
              G[num].append(tup)
            else:
              G[num] = []
              G[num].append(tup) 

    return(G) 
#constructing nodes
lg_lecture_rooms = ['C-015','E-011','E-012','E-002']
gf_lecture_rooms=['E-121','C-109','E-101','E-100']
ff_lecture_rooms = ['W-243','W-242','W-234','C-200','N-220','N-219','E-220','E-215']
sf_lecture_rooms=['W-321']   
lg_labs = ['E-010','E-003','C-007','C-004','C-001','C-025']
gf_labs = ['W-121','W-118','W-111','W-114','W-110','W-100']
ff_labs = ['E-226','W-244']
sf_labs = ['W-311']     
lg_staircases_and_lifts = ['Reception Stairs','Amphi Stairs','Entrance Stairs','Tapal Stairs','Ramp','Courtyard Stairs','Courtyard Lifts','Reception Lifts']
gf_staircases_and_lifts = ['Reception Stairs','Amphi Stairs','Entrance Stairs','Tapal Stairs','Ramp','Vending Machine Stairs','Courtyard Stairs','Courtyard Lifts','Reception Lifts']
ff_staircases_and_lifts = ['Reception Stairs','Vending Machine Stairs','Courtyard Stairs','Courtyard Lifts','Reception Lifts']
sf_staircases_and_lifts = ['Courtyard Stairs','Courtyard Lifts']
staircases = [('Reception Stairs',[0,1,2,3]),('Ramp',[0,1]),('Vending Machine Stairs',[1,2]),('Amphi Stairs',[0,1]),('Courtyard Stairs',[0,1,2,3]),('Tapal Stairs',[0,1])]
lifts = [('Reception Lifts',[0,1,2,3]),('Ehsaas Lifts',[0,1,2]),('Courtyard Lifts',[0,1,2,3,4])]   
lowerf_graph = dict() 
groundf_graph = dict() 
firstf_graph = dict() 
secondf_graph = dict()
thirdf_graph = dict() 
#constructing edges
ff_edges = ['W-244','W-243',20],['W-243','W-242',39],['N-219','N-220',10],['N-220','C-200',32],['N-220','Courtyard Stairs',153],['W-242','Vending Machine Stairs',122],['W-234','Courtyard Lifts',17],['W-242','Courtyard Lifts',75],['C-200','Reception Lifts',18],['Courtyard Lifts','Courtyard Stairs',37],['E-220','Vending Machine Stairs',38],['C-200','Courtyard Stairs',133],['Courtyard Stairs','Vending Machine Stairs',142],['Courtyard Lifts','Vending Machine Stairs', 109], ['C-200','Reception Stairs',59],['E-215','Reception Stairs',52],['E-215','C-200',43],['Reception Stairs','Courtyard Stairs',119]
lg_edges = ['E-012','E-011',3],['E-002','Entrance Stairs',86] ,['E-011','E-010',22],['E-010','E-003',53],['E-003','E-002',7],['E-002','C-001',47] ,['C-015','C-007',150],['C-007','C-004',40],['C-004','C-001',40],['C-025','Courtyard Lifts',94],['C-025','Entrance Stairs',226],['C-001','Courtyard Lifts',217],['E-012','Ramp',20],['C-015','Amphi Stairs',18],['Amphi Stairs','C-025',159],['C-001','Reception Lifts',101],['Entrance Stairs','C-001',45],['C-007','Tapal Stairs',56],['Tapal Stairs','C-015',18],['Courtyard Stairs','Entrance Stairs',109],['Courtyard Stairs','Courtyard Lifts',112],['Courtyard Stairs','C-025',164],['C-007','C-001',80],['C-007','Reception Lifts',181],['Reception Stairs','C-001',102],['Reception Stairs','E-002',147]
gf_edges =  ['W-100','W-110',22],  ['Reception Lifts','Entrance Stairs',102], ['Courtyard Stairs','Courtyard Lifts',35],['Courtyard Stairs','W-118',189],['Courtyard Stairs','W-111',189],  ['W-118','W-110',191], ['W-111','W-110',191],['W-118','W-100',189],['W-111','W-100',189],['E-101','Vending Machine Stairs',260],['E-121','Amphi Stairs',86],['W-121','W-118',10],['W-114','W-111',10],['W-118','W-111',18],['E-101','Ramp',48 ], ['C-109','E-101',244], ['W-118','C-109',144],['W-111','C-109',144],['C-109','W-110',103],['C-109','W-100',101],['W-100','Courtyard Lifts',15],['W-110','Courtyard Lifts',17],['W-110','Courtyard Stairs',50],['W-100','Courtyard Stairs',48],['C-109','Courtyard Stairs',61],['C-109','Courtyard Lifts',96],['W-118','Courtyard Lifts',184],['W-111','Courtyard Lifts',184],['E-121','Tapal Stairs',46],['C-109','Tapal Stairs',98],['E-101','Tapal Stairs',250],['Reception Lifts','Reception Stairs',65],['Reception Stairs','Entrance Stairs',42],['Entrance Stairs','E-101',165],['Entrance Stairs','C-109',199],['W-118','Amphi Stairs',104],['W-111','Amphi Stairs',104],['E-100','Reception Lifts',93],['E-100','Reception Stairs',64],['E-100','Entrance Stairs',101],['Vending Machine Stairs','C-109',80],['Vending Machine Stairs','Tapal Stairs',28],['Vending Machine Stairs','Entrance Stairs',225],['Tapal Stairs','Amphi Stairs',86],['Tapal Stairs','Entrance Stairs',205]
sf_edges = ['W-311','Courtyard Lifts',10],['Courtyard Lifts','W-321',39],['Courtyard Lifts','Courtyard Stairs',60],['W-311','Courtyard Stairs',60]

#adding nodes and edges, making an undirected graph for each floor
addNodes(lowerf_graph,lg_lecture_rooms)
addNodes(lowerf_graph,lg_labs) 
addNodes(lowerf_graph,lg_staircases_and_lifts)
addEdges(lowerf_graph,lg_edges,False)

addNodes(groundf_graph,gf_lecture_rooms)
addNodes(groundf_graph,gf_labs)
addNodes(groundf_graph,gf_staircases_and_lifts)
addEdges(groundf_graph,gf_edges,False)

addNodes(firstf_graph,ff_lecture_rooms) 
addNodes(firstf_graph,ff_labs) 
addNodes(firstf_graph,ff_staircases_and_lifts) 
addEdges(firstf_graph,ff_edges,False)

addNodes(secondf_graph,sf_lecture_rooms)
addNodes(secondf_graph,sf_labs)
addNodes(secondf_graph,sf_staircases_and_lifts)
addEdges(secondf_graph,sf_edges,False) 

print(lowerf_graph)
print(groundf_graph)
print(firstf_graph)
print(secondf_graph)

"""Level Wise Dictionary"""

level_wise = dict() 
level_wise[0] = lowerf_graph
level_wise[1] = groundf_graph
level_wise[2] = firstf_graph
level_wise[3] = secondf_graph 
level_wise[4] = thirdf_graph
print(level_wise)

"""Dijkstra Algorithm"""

def dijkstra(G,start,end): 
  unvisited = dict()
  final = dict()
  for i in G:
    unvisited[i] = 2000000000
  unvisited[start] = 0 
  visited = dict()
  while unvisited:
    minimum = min(unvisited, key=unvisited.get) 
    visited[minimum]=unvisited[minimum] 
    if minimum==end:
      break
    for neighbour, distance in G.get(minimum): 
      if neighbour in visited:
        continue
      dist = unvisited[minimum] + distance 
      if dist<unvisited[neighbour]:
        unvisited[neighbour]=dist
        final[neighbour] = minimum
    del unvisited[minimum] 

  vertex = end
  temp = vertex 
  
  while vertex!=start:
    temp += final[vertex] 
    vertex = final[vertex]
  
  route = [] 
  ind = 0
  for i in range(len(temp)):
    if ind==len(temp)-1:
      break

  result = []
  new_str = ''
  for i in range(len(temp)):
    alpha = temp[i]
    if alpha.isupper():
      new_str += alpha 
      if i>1:
          if temp[i-1].islower() or temp[i-1].isnumeric(): 
            update = new_str[:-1] 
            result.append(update)
            new_str = '' 
            new_str += alpha
    elif alpha=='-':
      new_str += alpha
    elif alpha == ' ':
      new_str += alpha 
    elif alpha.isnumeric():
      new_str += alpha
    else:
      new_str += alpha
  result.append(new_str)
          
  result.append([dist]) 
  result.reverse() 
  return result

"""Landmarks and Printing the Route"""

def landmarks(answer):
  prominent = [['E-012','E-011','E-010','E-010','Classrooms behind Tapal'],
               ['C-007','C-004','C-001','Labs infront of Tapal'],
               ['C-015','Class infront of Dukaan'],
               ['C-025','Workshop behind Amphitheater'],
               ['E-003','E-002','Music Room'],
               ['W-118','W-121','W-114','W-111','Labs near Water Courtyard'],
               ['E-121','Soorty Hall'],
               ['C-109','Class near Earth Courtyard'],
               ['W-110','W-100','Labs near Courtyard Lifts'],
               ['E-101','Class beside Cafe2Go'],
               ['E-100','Classroom next to reception'],
               ['C-200','Classroom next to Auditorium'],
               ['N-220','N-219','Classrooms behind Reception Lift'],
               ['W-234','Classroom next to Courtyard Lift'],
               ['W-243','W-244','W-242','Classrooms near Baithak'],
               ['E-220','Tariq Rafi Hall'],
               ['E-215','Auditorium'],
               ['W-311','Second Floor Computer Lab'],
               ['W-321','Classroom on Second Floor'],
               ['Tapal Stairs','Stairs infront of Cafeteria'],
               ['Vending Machine Stairs','Stairs beside Tariq Rafi'],
               ['Amphi Stairs','Amphi Stairs'],
               ['Courtyard Stairs','Courtyard Stairs'],
               ['Ramp','Cafe2Go Ramp'],
               ['Reception Stairs','Stairs behind Reception'],
               ['Entrance Stairs','Stairs after card turnstiles'],
               ['Reception Lifts','Reception Lifts'],
               ['Courtyard Lifts','Courtyard Lifts']]
  for i in prominent:
    for j in i: 
      if j==answer: 
        return i[-1]   

  return True 

def print_path(shortest_path,flag): 
   final_route = [] 
   temp_route = [] 
   count = 0
   if flag=='multi':
    for i in range(1,len(shortest_path)):
      if len(shortest_path[i])>5 and count==0:
        ways = landmarks(shortest_path[i])
        new_str = ('Take the '+ways) 
        temp_route.append(new_str)
        count += 1
      else:
        ways = landmarks(shortest_path[i]) 
        if ways==True:
          new_str = ('Go to '+shortest_path[i])
          temp_route.append(new_str)
        else: 
          new_str = ('Go to '+ways)
          temp_route.append(new_str) 

    for i in temp_route:
      if i not in final_route:
        final_route.append(i) 

    for i in final_route:
      print(i)
   elif flag=='same':
    for i in range(1,len(shortest_path)):
      if i==1:
        ways = landmarks(shortest_path[i])
        new_str = ('Start from '+ways) 
        temp_route.append(new_str)
      else:
        ways = landmarks(shortest_path[i]) 
        if ways==True:
          new_str = ('Go to '+shortest_path[i])
          temp_route.append(new_str)
        else: 
          new_str = ('Go to '+ways)
          temp_route.append(new_str) 

    for i in temp_route:
      if i not in final_route:
        final_route.append(i) 

    for i in final_route:
      print(i)

"""Implementing Dijkstra Based on Levels"""

def shortest_path(start_point,destination,level_wise):
  start_level = int(start_point[2])
  end_level = int(destination[2]) 
  if start_level==end_level:
      same = level_wise.get(start_level) 
      answer = (dijkstra(same,start_point,destination))
      (print_path(answer,'same')) 
  else:
    nested = level_wise.get(start_level) 
    xyz = nested.get(start_point) 
    temp = []
    for j in xyz:
      ans = nested.get(j[0])
      for k in ans:
        if len(k[0])>5:
          for connect in staircases:
            if k[0]==connect[0]:
              if int(destination[2]) in connect[1]:
                temp.append(k) 
            
          for connect in lifts:
            if k[0]==connect[0]:
              if int(destination[2]) in connect[1]:
                temp.append(k) 
    paths = [] 
    for i in temp:
      dest_lev = int(destination[2]) 
      ans = dijkstra(level_wise[dest_lev],i[0],destination)  
      paths.append(ans) 
    min_idx = 0 
    for j in range(len(paths)):
      if paths[j][0]<paths[min_idx][0]:
        min_idx = j
    ways = landmarks(start_point) 
    print('Start from',ways) 
    print_path(paths[min_idx],'multi') 

#Test Cases
# Same level
#shortest_path('N-219','W-243',level_wise) 
#shortest_path('C-025','E-010',level_wise)

#1 level apart
#shortest_path('C-015','W-100',level_wise) 
#shortest_path('N-220','E-121',level_wise) 

#2 level apart
#shortest_path('C-015','C-200',level_wise) 
#shortest_path('N-220','C-001',level_wise) 

#3 level apart 
shortest_path('W-321','E-010',level_wise)